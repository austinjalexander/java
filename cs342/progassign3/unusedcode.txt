  /*
  public int getDepth() {
    int depth = traverseTreeFindDepth(0, this.root);

    return (depth > 0) ? (depth + 1) : 0;
  }

  public int getDistinct() {
    int distinct = traverseTreeCountDistinct(0, this.root);

    return (distinct > 0) ? (distinct + 1) : 0;
  }
  */
  public void displayTree() {
    if (this.root == null) {
      System.out.println("Tree is empty.");
    }
    else if (this.root != null) {
      System.out.print(" root: " + this.root.getContent());
      traverseTreeAndDisplay(this.root);
    }
  }
  /*
  public int getDeepest() {
    traverseTreeFindDeepest(0, this.root);

    return (depth > 0) ? (depth + 1) : 0;
  }
  */



  /*
  private int traverseTreeFindDepth(int depth, 
                                    TreeNode current_tree_node) {
    int old_depth = depth;
    int left = 0;
    int right = 0;
    // if tree is not empty
    // (if tree is empty, depth will remain zero)
    if (this.root != null) {

      // go left
      if (current_tree_node.getLeft() != null) {
        left = traverseTreeFindDepth((depth + 1), 
                                    current_tree_node.getLeft());
      }
      // go right
      if (current_tree_node.getRight() != null) {
        right = traverseTreeFindDepth((depth + 1),
                                    current_tree_node.getRight());
      }

      // if either left or right nodes
      if ((left != 0) || (right != 0)) {
        depth = (left >= right) ? left : right;

        if (depth < 10) {
          System.out.println("depth: " + depth + " content: " + current_tree_node.getContent());
        }
        
      }
    }


    return depth;
  }
*/
  private int traverseTreeCountDistinct(int distinct, 
                                       TreeNode current_tree_node) {
    // if tree is not empty
    // (if tree is empty, depth will remain zero)
    if (this.root != null) {

      // go left
      if (current_tree_node.getLeft() != null) {
        distinct = traverseTreeCountDistinct((distinct + 1), 
                                    current_tree_node.getLeft());
      }
      // go right
      if (current_tree_node.getRight() != null) {
        distinct = traverseTreeCountDistinct((distinct + 1),
                                    current_tree_node.getRight());
      }

    }
    
    return distinct;
  }

  private void traverseTreeAndDisplay(TreeNode current_tree_node) {
      // go left
      if (current_tree_node.getLeft() != null) {
        System.out.print(" -> L: " + current_tree_node.getLeft().getContent());
        traverseTreeAndDisplay(current_tree_node.getLeft());
      }
      // go right
      if (current_tree_node.getRight() != null) {
        System.out.print(" -> R: " + current_tree_node.getRight().getContent());
        traverseTreeAndDisplay(current_tree_node.getRight());
      }

      System.out.println();
  }



    // add a node and its content
  private void traverseTreeAddContent(String content, 
                                      TreeNode current_tree_node) {
    // make string comparison
    int comparison = content.compareTo(current_tree_node.getContent());

    /* if the new content is lexicographically 
       equivalent to the current node string content, 
       (comparison == 0) */
    // update frequency
    if (comparison == 0) {
      current_tree_node.updateContentFrequency();
    }

     /* if the new content lexicographically 
       precedes the current node string content, (comparison < 0) */
    // go left
    else if (comparison < 0) {
      // if left node is empty
      if (current_tree_node.getLeft() == null) {
        current_tree_node.setLeft(new TreeNode(content));
      }
      // otherwise, keep traversing
      else if (current_tree_node.getLeft() != null) {
        traverseTreeAddContent(content, current_tree_node.getLeft());
      }
    }

     /* if the new content lexicographically 
       follows the current node string content, 
       (comparison > 0) */
    // go right
    else if (comparison > 0) {
      // if right node is empty
      if (current_tree_node.getRight() == null) {
        current_tree_node.setRight(new TreeNode(content));
      }
      // otherwise, keep traversing
      else if (current_tree_node.getRight() != null) {
        traverseTreeAddContent(content, current_tree_node.getRight());
      }
    }    
  }
  // search the tree for content
  private int traverseTreeSearchContent(String content,
                                        TreeNode current_tree_node) {
    // frequency
    int frequency = 0;

    // make string comparison
    int comparison = content.compareTo(current_tree_node.getContent());

    /* if the new content is lexicographically 
       equivalent to the current node string content, 
       (comparison == 0) */
    // get frequency
    if (comparison == 0) {
      frequency = current_tree_node.getFrequency();
    }

     /* if the new content lexicographically 
       precedes the current node string content, 
       (comparison < 0) */
    // go left
    else if (comparison < 0) {
      // if left node is not empty, keep traversing content
      // (if left node is empty, then content was not found; 
      // freq == 0);
      // hold on to frequency
      if (current_tree_node.getLeft() != null) {
        frequency = traverseTreeSearchContent(content, current_tree_node.getLeft());
      }
    }

     /* if the new content lexicographically 
       follows the current node string content, 
       (comparison > 0) */
    // go right
    else if (comparison > 0) {
      // if right node is not empty, keep traversing content
      // (if right node is empty, then content was not found; 
      // freq == 0)
      if (current_tree_node.getRight() != null) {
        // hold on to frequency
        frequency = traverseTreeSearchContent(content, current_tree_node.getRight());
      }
    }    

    return frequency;
  }